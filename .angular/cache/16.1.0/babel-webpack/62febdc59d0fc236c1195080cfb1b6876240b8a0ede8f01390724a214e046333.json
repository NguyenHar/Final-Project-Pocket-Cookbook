{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass RecipeService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = \"https://localhost:7270/api/Recipe/\";\n  }\n  // Checks database to see if recipe already exists, if it doesn't,\n  // Calls Spoonacular API and stores recipe inside database\n  // Return Recipe object based on the result id\n  getRecipeInfo(id) {\n    return this.http.get(this.baseURL + \"GetRecipeInfo?id=\" + id);\n  }\n  // Checks database to see if recipe already exists, if it doesn't,\n  // Calls Spoonacular API and stores recipe inside database\n  // Return list of recipe objects based on the Meal's primary key id\n  getRecipeInfoBulk(ids) {\n    let str = \"\";\n    for (let i = 0; i < ids.length; i++) {\n      if (i < ids.length - 1) {\n        str += ids[i];\n        str += '%2C';\n      } else {\n        str += ids[i];\n      }\n    }\n    return this.http.get(this.baseURL + \"GetRecipeInfoBulk?ids=\" + str);\n  }\n}\nRecipeService.ɵfac = function RecipeService_Factory(t) {\n  return new (t || RecipeService)(i0.ɵɵinject(i1.HttpClient));\n};\nRecipeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RecipeService,\n  factory: RecipeService.ɵfac,\n  providedIn: 'root'\n});\nexport { RecipeService };","map":{"version":3,"names":["RecipeService","constructor","http","baseURL","getRecipeInfo","id","get","getRecipeInfoBulk","ids","str","i","length","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\harry\\Desktop\\Grand Circus\\Final Project - Pocket Cookbook\\Pocket_Cookbook_FrontEnd\\src\\app\\recipe.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Recipe } from './recipe';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RecipeService {\r\n  baseURL:string = \"https://localhost:7270/api/Recipe/\";  \r\n  constructor(private http:HttpClient) { \r\n\r\n  }\r\n\r\n  // Checks database to see if recipe already exists, if it doesn't,\r\n  // Calls Spoonacular API and stores recipe inside database\r\n  // Return Recipe object based on the result id\r\n  getRecipeInfo(id:number):Observable<Recipe> {\r\n    return this.http.get<Recipe>(this.baseURL + \"GetRecipeInfo?id=\" + id);\r\n  }\r\n\r\n  // Checks database to see if recipe already exists, if it doesn't,\r\n  // Calls Spoonacular API and stores recipe inside database\r\n  // Return list of recipe objects based on the Meal's primary key id\r\n  getRecipeInfoBulk(ids:number[]):Observable<Recipe[]> {\r\n    let str:string = \"\";\r\n    for (let i=0; i<ids.length; i++)\r\n    {\r\n      if (i < ids.length - 1)\r\n      {\r\n        str += ids[i];\r\n        str += '%2C';\r\n      }\r\n      else\r\n      {\r\n        str += ids[i];\r\n      }\r\n    }\r\n\r\n    return this.http.get<Recipe[]>(this.baseURL + \"GetRecipeInfoBulk?ids=\" + str);\r\n  }\r\n}\r\n"],"mappings":";;AAKA,MAGaA,aAAa;EAExBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IADxB,KAAAC,OAAO,GAAU,oCAAoC;EAGrD;EAEA;EACA;EACA;EACAC,aAAaA,CAACC,EAAS;IACrB,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAS,IAAI,CAACH,OAAO,GAAG,mBAAmB,GAAGE,EAAE,CAAC;EACvE;EAEA;EACA;EACA;EACAE,iBAAiBA,CAACC,GAAY;IAC5B,IAAIC,GAAG,GAAU,EAAE;IACnB,KAAK,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACF,GAAG,CAACG,MAAM,EAAED,CAAC,EAAE,EAC/B;MACE,IAAIA,CAAC,GAAGF,GAAG,CAACG,MAAM,GAAG,CAAC,EACtB;QACEF,GAAG,IAAID,GAAG,CAACE,CAAC,CAAC;QACbD,GAAG,IAAI,KAAK;OACb,MAED;QACEA,GAAG,IAAID,GAAG,CAACE,CAAC,CAAC;;;IAIjB,OAAO,IAAI,CAACR,IAAI,CAACI,GAAG,CAAW,IAAI,CAACH,OAAO,GAAG,wBAAwB,GAAGM,GAAG,CAAC;EAC/E;;AAhCWT,aAAa,C;mBAAbA,aAAa,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAbf,aAAa,C;SAAbA,aAAa;EAAAgB,OAAA,EAAbhB,aAAa,CAAAiB,IAAA;EAAAC,UAAA,EAFZ;AAAM;SAEPlB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}