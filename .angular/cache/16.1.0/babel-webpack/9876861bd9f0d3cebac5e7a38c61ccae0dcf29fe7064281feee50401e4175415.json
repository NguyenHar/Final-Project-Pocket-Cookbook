{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass MealService {\n  constructor(http) {\n    this.http = http;\n    // Object that encapsulates all of the input information necessary\n    this.mealSelectionData = {};\n    this.url = \"https://localhost:7270/api/Meal/\";\n    this.mealSelectionData.time = 30;\n    this.mealSelectionData.recipes = [];\n    this.mealSelectionData.resultsList = [];\n    this.mealSelectionData.favoritedMeals = [];\n  }\n  // // Obsolete\n  // // Retrieves list of meal results from api call\n  // getMeals(query:string, time:number):Observable<Result[]>{\n  //   return this.http.get<Result[]>(this.url + 'MealCustomQueryReturnResults?' + \"query=query%3D\" + query + \"%26maxReadyTime%3D\" + time);\n  // }\n  // // Obsolete\n  // // Retrieves list of meal results from the sql database without making an external API call\n  // retrieveMealFromDbById(id:number):Observable<Result[]>{\n  //   return this.http.get<Result[]>(this.url + 'RetrieveResultsByMealId?id=' + id);\n  // }\n  // Makes the above 2 functions obsolete\n  // Checks database to see if this request already exists in database, if true return those results\n  // If doesn't exist in database, make a spoonacular api call and store it in the database\n  // Returns: list of results matching the query and time restraints\n  returnResultsByMeal(query, time) {\n    return this.http.get(this.url + 'ReturnResultsbyMealQuery?query=query%3D' + query + '%26maxReadyTime%3D' + time);\n  }\n  // Checks database to see if this request already exists in database, if true return those results\n  // If doesn't exist in database, make a spoonacular api call and store it in the database\n  // Returns: list of results matching the cuisine and time restraints\n  returnResultsByCuisine(query, time) {\n    return this.http.get(this.url + 'ReturnResultsbyMealQuery?query=cuisine%3D' + query + '%26maxReadyTime%3D' + time);\n  }\n  // Checks the database and finds the meal's total result number based on result PK id'\n  // Returns: quantity of search results for that meal\n  getResultCount(id) {\n    return this.http.get(this.url + 'GetResultCount?resultId=' + id);\n  }\n}\nMealService.ɵfac = function MealService_Factory(t) {\n  return new (t || MealService)(i0.ɵɵinject(i1.HttpClient));\n};\nMealService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MealService,\n  factory: MealService.ɵfac,\n  providedIn: 'root'\n});\nexport { MealService };","map":{"version":3,"names":["MealService","constructor","http","mealSelectionData","url","time","recipes","resultsList","favoritedMeals","returnResultsByMeal","query","get","returnResultsByCuisine","getResultCount","id","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\harry\\Desktop\\Grand Circus\\Final Project - Pocket Cookbook\\Pocket_Cookbook_FrontEnd\\src\\app\\meal.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Meal, MealSelection, Result } from './meal';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { SocialUser } from '@abacritt/angularx-social-login';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MealService {\r\n  // Object that encapsulates all of the input information necessary\r\n  mealSelectionData:MealSelection = {} as MealSelection;\r\n  url:string = \"https://localhost:7270/api/Meal/\";\r\n\r\n  constructor(private http:HttpClient) { \r\n    this.mealSelectionData.time = 30;\r\n    this.mealSelectionData.recipes = [];\r\n    this.mealSelectionData.resultsList = [];\r\n    this.mealSelectionData.favoritedMeals = [];\r\n  }\r\n\r\n  // // Obsolete\r\n  // // Retrieves list of meal results from api call\r\n  // getMeals(query:string, time:number):Observable<Result[]>{\r\n  //   return this.http.get<Result[]>(this.url + 'MealCustomQueryReturnResults?' + \"query=query%3D\" + query + \"%26maxReadyTime%3D\" + time);\r\n  // }\r\n\r\n  // // Obsolete\r\n  // // Retrieves list of meal results from the sql database without making an external API call\r\n  // retrieveMealFromDbById(id:number):Observable<Result[]>{\r\n  //   return this.http.get<Result[]>(this.url + 'RetrieveResultsByMealId?id=' + id);\r\n  // }\r\n\r\n  // Makes the above 2 functions obsolete\r\n  // Checks database to see if this request already exists in database, if true return those results\r\n  // If doesn't exist in database, make a spoonacular api call and store it in the database\r\n  // Returns: list of results matching the query and time restraints\r\n  returnResultsByMeal(query:string, time:number):Observable<Result[]>{\r\n    return this.http.get<Result[]>(this.url + 'ReturnResultsbyMealQuery?query=query%3D' + query + '%26maxReadyTime%3D' + time);\r\n  }\r\n\r\n  // Checks database to see if this request already exists in database, if true return those results\r\n  // If doesn't exist in database, make a spoonacular api call and store it in the database\r\n    // Returns: list of results matching the cuisine and time restraints\r\n  returnResultsByCuisine(query:string, time:number):Observable<Result[]>{\r\n    return this.http.get<Result[]>(this.url + 'ReturnResultsbyMealQuery?query=cuisine%3D' + query + '%26maxReadyTime%3D' + time);\r\n  }\r\n\r\n  // Checks the database and finds the meal's total result number based on result PK id'\r\n  // Returns: quantity of search results for that meal\r\n  getResultCount(id:number):Observable<number>{\r\n    return this.http.get<number>(this.url + 'GetResultCount?resultId=' + id);\r\n  }\r\n\r\n}\r\n"],"mappings":";;AAMA,MAGaA,WAAW;EAKtBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IAJxB;IACA,KAAAC,iBAAiB,GAAiB,EAAmB;IACrD,KAAAC,GAAG,GAAU,kCAAkC;IAG7C,IAAI,CAACD,iBAAiB,CAACE,IAAI,GAAG,EAAE;IAChC,IAAI,CAACF,iBAAiB,CAACG,OAAO,GAAG,EAAE;IACnC,IAAI,CAACH,iBAAiB,CAACI,WAAW,GAAG,EAAE;IACvC,IAAI,CAACJ,iBAAiB,CAACK,cAAc,GAAG,EAAE;EAC5C;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACAC,mBAAmBA,CAACC,KAAY,EAAEL,IAAW;IAC3C,OAAO,IAAI,CAACH,IAAI,CAACS,GAAG,CAAW,IAAI,CAACP,GAAG,GAAG,yCAAyC,GAAGM,KAAK,GAAG,oBAAoB,GAAGL,IAAI,CAAC;EAC5H;EAEA;EACA;EACE;EACFO,sBAAsBA,CAACF,KAAY,EAAEL,IAAW;IAC9C,OAAO,IAAI,CAACH,IAAI,CAACS,GAAG,CAAW,IAAI,CAACP,GAAG,GAAG,2CAA2C,GAAGM,KAAK,GAAG,oBAAoB,GAAGL,IAAI,CAAC;EAC9H;EAEA;EACA;EACAQ,cAAcA,CAACC,EAAS;IACtB,OAAO,IAAI,CAACZ,IAAI,CAACS,GAAG,CAAS,IAAI,CAACP,GAAG,GAAG,0BAA0B,GAAGU,EAAE,CAAC;EAC1E;;AA3CWd,WAAW,C;mBAAXA,WAAW,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXlB,WAAW,C;SAAXA,WAAW;EAAAmB,OAAA,EAAXnB,WAAW,CAAAoB,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPrB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}