// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pocket_Cookbook_Backend.Models;

#nullable disable

namespace Pocket_Cookbook_Backend.Migrations
{
    [DbContext(typeof(CookbookContext))]
    [Migration("20230623183440_user-favorites")]
    partial class userfavorites
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Datum", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<string>("brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("countryOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("productFK")
                        .HasColumnType("int");

                    b.Property<string>("productId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("upc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("primary_key_id");

                    b.HasIndex("productFK");

                    b.ToTable("data");
                });

            modelBuilder.Entity("Fulfillment", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<bool>("curbside")
                        .HasColumnType("bit");

                    b.Property<bool>("delivery")
                        .HasColumnType("bit");

                    b.Property<bool>("inStore")
                        .HasColumnType("bit");

                    b.Property<bool>("shipToHome")
                        .HasColumnType("bit");

                    b.HasKey("primary_key_id");

                    b.ToTable("fulfillments");
                });

            modelBuilder.Entity("Image", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<int>("dataFK")
                        .HasColumnType("int");

                    b.Property<bool>("featured")
                        .HasColumnType("bit");

                    b.Property<string>("perspective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("primary_key_id");

                    b.HasIndex("dataFK");

                    b.ToTable("images");
                });

            modelBuilder.Entity("Inventory", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<string>("stockLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("primary_key_id");

                    b.ToTable("inventory");
                });

            modelBuilder.Entity("Item", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<int>("dataFK")
                        .HasColumnType("int");

                    b.Property<bool>("favorite")
                        .HasColumnType("bit");

                    b.Property<int>("fulfillmentprimary_key_id")
                        .HasColumnType("int");

                    b.Property<int>("inventoryprimary_key_id")
                        .HasColumnType("int");

                    b.Property<string>("itemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("priceprimary_key_id")
                        .HasColumnType("int");

                    b.Property<string>("size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("soldBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("primary_key_id");

                    b.HasIndex("dataFK");

                    b.HasIndex("fulfillmentprimary_key_id");

                    b.HasIndex("inventoryprimary_key_id");

                    b.HasIndex("priceprimary_key_id");

                    b.ToTable("items");
                });

            modelBuilder.Entity("KrogerProduct", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.HasKey("primary_key_id");

                    b.ToTable("krogerProducts");
                });

            modelBuilder.Entity("Meta", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<int>("productFK")
                        .HasColumnType("int");

                    b.HasKey("primary_key_id");

                    b.HasIndex("productFK")
                        .IsUnique();

                    b.ToTable("metas");
                });

            modelBuilder.Entity("Pagination", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<int>("limit")
                        .HasColumnType("int");

                    b.Property<int>("metaFK")
                        .HasColumnType("int");

                    b.Property<int>("start")
                        .HasColumnType("int");

                    b.Property<int>("total")
                        .HasColumnType("int");

                    b.HasKey("primary_key_id");

                    b.HasIndex("metaFK")
                        .IsUnique();

                    b.ToTable("paginations");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Analyzedinstruction", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<int>("RecipeFK")
                        .HasColumnType("int");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("primary_key_id");

                    b.HasIndex("RecipeFK");

                    b.ToTable("analyzedinstructions");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Equipment", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<int>("StepFK")
                        .HasColumnType("int");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("localizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("primary_key_id");

                    b.HasIndex("StepFK");

                    b.ToTable("equipment");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Extendedingredient", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<int>("RecipeFK")
                        .HasColumnType("int");

                    b.Property<string>("aisle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("amount")
                        .HasColumnType("real");

                    b.Property<string>("consistency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("measuresprimary_key_id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameClean")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("original")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("originalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("primary_key_id");

                    b.HasIndex("RecipeFK");

                    b.HasIndex("measuresprimary_key_id");

                    b.ToTable("extendedingredients");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Ingredient", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<int>("StepFK")
                        .HasColumnType("int");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("localizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("primary_key_id");

                    b.HasIndex("StepFK");

                    b.ToTable("ingredients");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Meal", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int?>("number")
                        .HasColumnType("int");

                    b.Property<int?>("offset")
                        .HasColumnType("int");

                    b.Property<int?>("totalResults")
                        .HasColumnType("int");

                    b.HasKey("primary_key_id");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Measures", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int?>("metricprimary_key_id")
                        .HasColumnType("int");

                    b.Property<int?>("usprimary_key_id")
                        .HasColumnType("int");

                    b.HasKey("primary_key_id");

                    b.HasIndex("metricprimary_key_id");

                    b.HasIndex("usprimary_key_id");

                    b.ToTable("measures");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Metric", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<float?>("amount")
                        .HasColumnType("real");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("unitLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("unitShort")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("primary_key_id");

                    b.ToTable("units_metric");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Queries", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<int>("mealFK")
                        .HasColumnType("int");

                    b.Property<string>("query")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("time")
                        .HasColumnType("int");

                    b.HasKey("primary_key_id");

                    b.HasIndex("mealFK");

                    b.ToTable("Queries");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Recipe", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<int?>("aggregateLikes")
                        .HasColumnType("int");

                    b.Property<bool?>("cheap")
                        .HasColumnType("bit");

                    b.Property<int?>("cookingMinutes")
                        .HasColumnType("int");

                    b.Property<string>("creditsText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("dairyFree")
                        .HasColumnType("bit");

                    b.Property<string>("gaps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("glutenFree")
                        .HasColumnType("bit");

                    b.Property<int?>("healthScore")
                        .HasColumnType("int");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("lowFodmap")
                        .HasColumnType("bit");

                    b.Property<int?>("preparationMinutes")
                        .HasColumnType("int");

                    b.Property<float?>("pricePerServing")
                        .HasColumnType("real");

                    b.Property<int?>("readyInMinutes")
                        .HasColumnType("int");

                    b.Property<int?>("servings")
                        .HasColumnType("int");

                    b.Property<string>("sourceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sourceUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("spoonacularSourceUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("sustainable")
                        .HasColumnType("bit");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("vegan")
                        .HasColumnType("bit");

                    b.Property<bool?>("vegetarian")
                        .HasColumnType("bit");

                    b.Property<bool?>("veryHealthy")
                        .HasColumnType("bit");

                    b.Property<bool?>("veryPopular")
                        .HasColumnType("bit");

                    b.Property<int?>("weightWatcherSmartPoints")
                        .HasColumnType("int");

                    b.HasKey("primary_key_id");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Result", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("mealFK")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("primary_key_id");

                    b.HasIndex("mealFK");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Step", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<int>("AnalyzedInstructionFK")
                        .HasColumnType("int");

                    b.Property<int?>("AnalyzedInstructionprimary_key_id")
                        .HasColumnType("int");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int?>("number")
                        .HasColumnType("int");

                    b.Property<string>("step")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("primary_key_id");

                    b.HasIndex("AnalyzedInstructionprimary_key_id");

                    b.ToTable("steps");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.TokenStorage", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("primary_key_id");

                    b.ToTable("tokenstorage");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Us", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<float?>("amount")
                        .HasColumnType("real");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("unitLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("unitShort")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("primary_key_id");

                    b.ToTable("units_us");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.UserFavorites", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<string>("googleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("resultFK")
                        .HasColumnType("int");

                    b.HasKey("primary_key_id");

                    b.HasIndex("resultFK");

                    b.ToTable("userFavorites");
                });

            modelBuilder.Entity("Price", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<float>("promo")
                        .HasColumnType("real");

                    b.Property<float>("regular")
                        .HasColumnType("real");

                    b.HasKey("primary_key_id");

                    b.ToTable("prices");
                });

            modelBuilder.Entity("Size", b =>
                {
                    b.Property<int>("primary_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("primary_key_id"));

                    b.Property<int>("imgFK")
                        .HasColumnType("int");

                    b.Property<string>("size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("primary_key_id");

                    b.HasIndex("imgFK");

                    b.ToTable("sizes");
                });

            modelBuilder.Entity("Datum", b =>
                {
                    b.HasOne("KrogerProduct", "Product")
                        .WithMany("data")
                        .HasForeignKey("productFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Image", b =>
                {
                    b.HasOne("Datum", "Data")
                        .WithMany("images")
                        .HasForeignKey("dataFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Data");
                });

            modelBuilder.Entity("Item", b =>
                {
                    b.HasOne("Datum", "Data")
                        .WithMany("items")
                        .HasForeignKey("dataFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fulfillment", "fulfillment")
                        .WithMany()
                        .HasForeignKey("fulfillmentprimary_key_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory", "inventory")
                        .WithMany()
                        .HasForeignKey("inventoryprimary_key_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Price", "price")
                        .WithMany()
                        .HasForeignKey("priceprimary_key_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Data");

                    b.Navigation("fulfillment");

                    b.Navigation("inventory");

                    b.Navigation("price");
                });

            modelBuilder.Entity("Meta", b =>
                {
                    b.HasOne("KrogerProduct", "Product")
                        .WithOne("meta")
                        .HasForeignKey("Meta", "productFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Pagination", b =>
                {
                    b.HasOne("Meta", "Meta")
                        .WithOne("pagination")
                        .HasForeignKey("Pagination", "metaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meta");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Analyzedinstruction", b =>
                {
                    b.HasOne("Pocket_Cookbook_Backend.Models.Recipe", "Recipe")
                        .WithMany("analyzedInstructions")
                        .HasForeignKey("RecipeFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Equipment", b =>
                {
                    b.HasOne("Pocket_Cookbook_Backend.Models.Step", "Step")
                        .WithMany("equipment")
                        .HasForeignKey("StepFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Extendedingredient", b =>
                {
                    b.HasOne("Pocket_Cookbook_Backend.Models.Recipe", "Recipe")
                        .WithMany("extendedIngredients")
                        .HasForeignKey("RecipeFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pocket_Cookbook_Backend.Models.Measures", "measures")
                        .WithMany()
                        .HasForeignKey("measuresprimary_key_id");

                    b.Navigation("Recipe");

                    b.Navigation("measures");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Ingredient", b =>
                {
                    b.HasOne("Pocket_Cookbook_Backend.Models.Step", "Step")
                        .WithMany("ingredients")
                        .HasForeignKey("StepFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Measures", b =>
                {
                    b.HasOne("Pocket_Cookbook_Backend.Models.Metric", "metric")
                        .WithMany()
                        .HasForeignKey("metricprimary_key_id");

                    b.HasOne("Pocket_Cookbook_Backend.Models.Us", "us")
                        .WithMany()
                        .HasForeignKey("usprimary_key_id");

                    b.Navigation("metric");

                    b.Navigation("us");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Queries", b =>
                {
                    b.HasOne("Pocket_Cookbook_Backend.Models.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("mealFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Result", b =>
                {
                    b.HasOne("Pocket_Cookbook_Backend.Models.Meal", "Meal")
                        .WithMany("results")
                        .HasForeignKey("mealFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Step", b =>
                {
                    b.HasOne("Pocket_Cookbook_Backend.Models.Analyzedinstruction", "AnalyzedInstruction")
                        .WithMany("steps")
                        .HasForeignKey("AnalyzedInstructionprimary_key_id");

                    b.Navigation("AnalyzedInstruction");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.UserFavorites", b =>
                {
                    b.HasOne("Pocket_Cookbook_Backend.Models.Result", "Result")
                        .WithMany()
                        .HasForeignKey("resultFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Size", b =>
                {
                    b.HasOne("Image", "Img")
                        .WithMany("sizes")
                        .HasForeignKey("imgFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Img");
                });

            modelBuilder.Entity("Datum", b =>
                {
                    b.Navigation("images");

                    b.Navigation("items");
                });

            modelBuilder.Entity("Image", b =>
                {
                    b.Navigation("sizes");
                });

            modelBuilder.Entity("KrogerProduct", b =>
                {
                    b.Navigation("data");

                    b.Navigation("meta")
                        .IsRequired();
                });

            modelBuilder.Entity("Meta", b =>
                {
                    b.Navigation("pagination")
                        .IsRequired();
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Analyzedinstruction", b =>
                {
                    b.Navigation("steps");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Meal", b =>
                {
                    b.Navigation("results");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Recipe", b =>
                {
                    b.Navigation("analyzedInstructions");

                    b.Navigation("extendedIngredients");
                });

            modelBuilder.Entity("Pocket_Cookbook_Backend.Models.Step", b =>
                {
                    b.Navigation("equipment");

                    b.Navigation("ingredients");
                });
#pragma warning restore 612, 618
        }
    }
}
